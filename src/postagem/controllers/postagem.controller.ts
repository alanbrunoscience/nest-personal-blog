import { JwtAuthGuard } from '../../auth/guard/jwt-auth.guard';
import { Postagem } from '../entities/postagem.entity';
import { PostagemService } from './../services/postagem.service';
import {
  Body,
  Controller,
  Delete,
  Get,
  HttpCode,
  HttpStatus,
  Param,
  ParseIntPipe,
  Post,
  Put,
  UseGuards,
} from '@nestjs/common';

@UseGuards(JwtAuthGuard)
@Controller('/postagens') // Definir o caminho do recurso Postagem (endpoint)
export class PostagemController {
  constructor(private readonly postagemService: PostagemService) {} // Construtor criado para receber as Inje√ß√µes de Depend√™ncias necess√°rias para o funcionamento da classe controladora.
  // Com isso, podemos acessar todos os m√©todos e funcionalidades da PostagemService dentro da controladora, permitindo que a l√≥gica de neg√≥cios (como a recupera√ß√£o, cria√ß√£o, atualiza√ß√£o e exclus√£o de postagens) seja delegada ao servi√ßo,
  // Mantendo a controladora focada apenas em gerenciar as requisi√ß√µes HTTP.
  // 'private': A propriedade postagemService s√≥ pode ser acessada dentro da classe em que foi definida. Ela n√£o estar√° dispon√≠vel fora dessa classe;
  // 'readonly': Ap√≥s a propriedade postagemService ser inicializada, ela n√£o pode ser reatribu√≠da. Por exemplo: this.postagemService = novoServico. Sem o modificador readonly, voc√™ poderia sobrescrever postagemService dentro da classe, o que pode levar a comportamentos inesperados.

  @Get()
  @HttpCode(HttpStatus.OK) // Status 200 - Opera√ß√£o realizada com √™xito. Caso ocorra algum erro durante o processamento, o c√≥digo de status ser√° ajustado de acordo com o tipo de erro.
  findAll(): Promise<Postagem[]> {
    return this.postagemService.findAll();
  }

  @Get('/:id')
  @HttpCode(HttpStatus.OK)
  findById(@Param('id', ParseIntPipe) id: number): Promise<Postagem> {
    // A Classe ParseIntPipe √© utilizada para garantir que o valor de id seja tratado como um n√∫mero inteiro.
    // Por quest√µes de boas pr√°ticas e legibilidade do c√≥digo, a Vari√°vel de Caminho e o Par√¢metro do M√©todo devem possuir o mesmo nome.
    return this.postagemService.findById(id);
  }

  @Get('/titulo/:titulo')
  @HttpCode(HttpStatus.OK)
  findAllByTitulo(@Param('titulo') titulo: string): Promise<Postagem[]> {
    return this.postagemService.findAllByTitulo(titulo);
  }

  @Post()
  @HttpCode(HttpStatus.CREATED) // Status 201 - Created
  // @Body(): Este decorador acessa o Objeto postagem enviado no corpo da Requisi√ß√£o e insere no Objeto postagem (par√¢metro) do M√©todo create(@Body() postagem: Postagem);
  create(@Body() postagem: Postagem): Promise<Postagem> {
    return this.postagemService.create(postagem);
  }

  @Put() // Mapeia todas as Requisi√ß√µes HTTP PUT. Ou seja, indica que o M√©todo update(@Body() postagem: Postagem), responder√° a todas as requisi√ß√µes do tipo HTTP PUT, enviadas ao endpoint.
  @HttpCode(HttpStatus.OK)
  update(@Body() postagem: Postagem): Promise<Postagem> {
    return this.postagemService.update(postagem);
  }

  @Delete('/:id')
  @HttpCode(HttpStatus.NO_CONTENT) // NO_CONTENT ü°™ 204 (o Objeto n√£o existe, pois foi apagado do BD).
  delete(@Param('id', ParseIntPipe) id: number) { // A instru√ß√£o ParseIntPipe converte o valor da vari√°vel de caminho id (inicialmente uma string) em um n√∫mero.
    return this.postagemService.delete(id);
  }
}
